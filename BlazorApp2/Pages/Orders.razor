@page "/locations/{locationId}/orders"

@using BlazorApp2.Data

@inject NavigationManager NavigationManager
@inject OrderService OrderService

<h1>Orders</h1>

@if (this.IsBusy)
{
    <p>Loading...</p>
    return;
}

<ul class="nav nav-pills justify-content-center">
    <li class="nav-item">
        <a class="nav-link active" href="#">Open</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="#">Recently Delivered</a>
    </li>
</ul>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th class="text-center"><i class="fa fa-calendar"></i></th>
            <th>Customer</th>
            <th class="text-center"><i class="fa fa-phone"></i></th>
            <th class="text-center">Arrived</th>
            <th class="text-center">Delivered</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in this.OrderList.OrderByDescending(x => x.CreatedOn))
        {
            <tr>
                <td class="col-0"><a href="@order.LocationId" class="btn btn-outline-primary">Deliver</a></td>
                <td class="col-0 text-center">@order.CreatedOn</td>
                <td>@order.CustomerName</td>
                <td class="col-0 text-center">@order.CustomerPhoneNumber</td>
                <td class="col-0 text-center">@order.ArrivedAt</td>
                <td class="col-0 text-center">@order.DeliveredAt</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public string LocationId { get; set; }

    public bool IsBusy { get; set; }

    public IEnumerable<Order> OrderList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;

        this.OrderList =
            await this.OrderService.ListAsync(
                this.LocationId);

        this.IsBusy = false;
    }
}
